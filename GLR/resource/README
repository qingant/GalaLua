资源打包模块的使用说明

资源打包模块用于将lua脚本依赖的库文件打包成单一的资源文件。目前支持的lua库为
lua脚本库或者已编译的lua字节码库，不能处理C语言的lua库。

1. mkresx的使用方法：
    为了处理上的简单起见，mkresx的第一个参数为-o选项，后面为指定输出的资源文件名，
其余的参数为待打入资源包的各个文件，可以是文件的路径，也可以是文件夹。对于前者
而言，资源文件中的文件名为文件名，在资源文件中所在的路径为根目录；而对于后者，
目录下的所有文件，包括目录本身都会被打入资源文件。目录本身在资源文件中的路径为
根目录下的子目录。
    例如：mkresx -o resource.mksx file1 /path/to/file2 /foo/bar/directory，输出
的资源文件名为resource.mksx。如果未指定，默认输出的资源文件名为resource.mksx。
文件file1在资源文件中的路径为/file1；文件/path/to/file2在资源文件中的路径为
/file2；/foo/bar/directory目录下的文件file3在资源文件中的路径为/directory/file3。

2. 资源文件的使用方法：
    资源文件的使用必须附着在一个可执行的二进制文件上，通过将资源文件追加在可执行
的二进制尾端，然后调用如下几个C接口函数来实现访问资源文件中指定的文件。接口说明如下：

读取资源文件所需的结构变量的初始化
@param resxenvp 结构变量的指针
@return 如果初始化成功，返回0；否则，返回-1.
int resx_environ_open(resx_environ_t *resxenvp)

读取资源文件所需的结构变量所用资源的释放
@param 结构变量的指针
void resx_environ_close(resx_environ_t *resxenvp)

将文件流的游标定位到资源文件中指定路径下的文件
@param resxenvp 结构变量的指针
@param pathname 具体的资源文件在资源文件包中的路径
@return 如果执行成功，返回0；返回-1，读取文件时发生缓冲区不足等错误；返回-2，
未找到指定路径下的资源文件。
int resx_environ_read(const resx_environ_t *resxenvp, const char *pathname)

从资源文件流的当前游标开始读取资源文件的内容
@param buf 指向存放已读内容的缓冲区的指针
@param bufsiz 缓冲区的字节数，也是本次调用所读取的可能的最大字节数。
@param resxenvp 结构变量的指针
@return 返回实际读取的字节数
size_t resx_read(void *buf, size_t bufsiz, resx_environ_t *resxenvp)

具体操作时，在二进制可执行文件中，需要访问资源文件时，调用resx_environ_open来
完成访问的初始化，然后调用resx_environ_read将文件流定位到指定路径下的资源文件中，
然后通过resx_read来读取资源文件的内容。在不需要资源文件时，通过resx_environ_close
来释放所占用的资源。

